!function(e){var n={};function t(o){if(n[o])return n[o].exports;var i=n[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)t.d(o,i,function(n){return e[n]}.bind(null,i));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=4)}([function(e,n,t){},function(e,n,t){e.exports=t.p+"images/logo-play.png"},function(e,n,t){e.exports=t.p+"images/logo-negative.png"},function(e,n,t){e.exports=t.p+"images/go-back-to-main-page.png"},function(e,n,t){"use strict";function o(e){let n=!1;window.addEventListener("scroll",t=>{n||window.requestAnimationFrame(()=>{e(),n=!1}),n=!0})}function i(){return void 0!==window.pageYOffset?window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop}var r;t.r(n),function(e){e.CODE_AREA=".code-area",e.CONTENT="#d2v-content",e.CURRENT_SECTION_NAME="#current-section-name",e.TOP_HEADER="#d2v-header",e.NAVIGATION_MENU="#site-navigation"}(r||(r={}));class c{constructor(e,n){this._element=e,this._elementInMenu=this.getElementInMenu(n)}get isActive(){return this._element.getBoundingClientRect().top<=window.innerHeight/2}set classname(e){"active"===e?this._elementInMenuContainsActiveClass||this._elementInMenu.classList.add("active"):this._elementInMenuContainsActiveClass&&this._elementInMenu.classList.remove("active")}getElementInMenu(e){const n=document.querySelectorAll(`${r.NAVIGATION_MENU} > li > ul > li > a`);for(const e of n)if(e.getAttribute("href")==="#"+this._element.getAttribute("id"))return e}get _elementInMenuContainsActiveClass(){return void 0!==this._elementInMenu&&this._elementInMenu.classList.contains("active")}}const s=[],u={getInstance:e=>{s.push(e)},onChange:e=>{console.log("Editor code was changed:\n"+e)}};!function(){const e=document.querySelectorAll(".kotlin-code");for(const n of e)n instanceof HTMLElement&&KotlinPlayground(n,u).then(e=>{console.log(e)})}(),function(e,n){const t=document.body,r=void 0===n?0:n.getBoundingClientRect().height;o(()=>{const n=parseInt(window.getComputedStyle(e).paddingTop)-r;i()>=n&&!t.classList.contains("menu-fixed")?t.classList.add("menu-fixed"):i()<=n&&t.classList.contains("menu-fixed")&&t.classList.remove("menu-fixed")})}(document.querySelector(r.CONTENT),document.querySelector(r.TOP_HEADER)),document.querySelector(r.CURRENT_SECTION_NAME).innerHTML=function(){const e=document.querySelector("h1");return null!==e?e.innerHTML:""}(),function(){const e=document.querySelectorAll(`${r.NAVIGATION_MENU} > li > a`),n=document.querySelector("h1");if(null!==n)for(const t of e)t.innerHTML===n.innerHTML&&t.classList.add("active")}(),new Promise((e,n)=>{const t=[],o=document.querySelectorAll(`${r.CONTENT} h2`),i=document.querySelector(`${r.NAVIGATION_MENU}`);for(const e of o)t.push(new c(e,i));e(t.reverse()),n(new Error("can't get list of level two in navigation menu"))}).then(e=>{o(()=>{!function(e){let n=!0;for(const t of e)t.isActive&&n?(n=!1,t.classname="active"):t.classname="unactive"}(e)})});t(0),t(1),t(2),t(3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,