!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){},function(e,t,n){e.exports=n.p+"images/logo-play.png"},function(e,t,n){e.exports=n.p+"images/logo-negative.png"},function(e,t,n){e.exports=n.p+"images/go-back-to-main-page.png"},function(e,t,n){"use strict";function o(e){let t=!1;window.addEventListener("scroll",n=>{t||window.requestAnimationFrame(()=>{e(),t=!1}),t=!0})}function i(){return void 0!==window.pageYOffset?window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop}var r;n.r(t),function(e){e.CODE_AREA=".code-area",e.CONTENT="#d2v-content",e.CURRENT_SECTION_NAME="#current-section-name",e.TOP_HEADER="#d2v-header",e.NAVIGATION_MENU="#site-navigation"}(r||(r={}));class s{constructor(e,t){this._element=e,this._elementInMenu=this.getElementInMenu(t)}get isActive(){return this._element.getBoundingClientRect().top<=window.innerHeight/2}set classname(e){"active"===e?this._elementInMenuContainsActiveClass||this._elementInMenu.classList.add("active"):this._elementInMenuContainsActiveClass&&this._elementInMenu.classList.remove("active")}getElementInMenu(e){const t=document.querySelectorAll(`${r.NAVIGATION_MENU} > li > ul > li > a`);for(const e of t)if(e.getAttribute("href")==="#"+this._element.getAttribute("id"))return e}get _elementInMenuContainsActiveClass(){return void 0!==this._elementInMenu&&this._elementInMenu.classList.contains("active")}}class c{constructor(e){this._editors=[],this._editors=e,this._setListenerForEditorsAutoExecution()}runVisibleEditors(){for(const e of this._editors)e.isOnScreen&&e.hasNotBeenExecuted&&e.execute()}_setListenerForEditorsAutoExecution(){o(()=>{this.runVisibleEditors()})}}function u(e,t,n){const o=document.createElement(e);if("string"==typeof t)o.innerHTML=t;else if(t)for(const e of t)o.appendChild(e);return n&&(o.className=n),o}class l{constructor(e){this.MORE_THAN_ONCE_CODE_CHANGED_CLASSNAME="more-than-once-code-changed",this.SHORTCUT_INFO_CLASSNAME="shortcut-info compiler-info",this._hasBeenExecuted=!1,this._eventFunctions={getInstance:e=>{this._KotlinPlaygroundEditor=e},onChange:e=>{this.changedCounter++,2===this.changedCounter&&this.kotlinEditorContainer&&(this.kotlinEditorContainer.appendChild(u("div",[u("div","ctrl + r : run"),u("div","ctrl + space : code completion")],this.SHORTCUT_INFO_CLASSNAME)),this.kotlinEditorContainer.classList.add(this.MORE_THAN_ONCE_CODE_CHANGED_CLASSNAME))}},this.changedCounter=0,this._selector=e}init(){return new Promise(e=>{KotlinPlayground(this._selector,this._eventFunctions).then(()=>{if(this._KotlinPlaygroundEditor){this._kotlinEditorContainer=this._KotlinPlaygroundEditor.nodes[0];const e=this._kotlinEditorContainer.querySelector(r.CODE_AREA);null!==e&&e instanceof HTMLElement&&(this._codeArea=e)}e(this)})})}get kotlinEditorContainer(){return this._kotlinEditorContainer}get codeArea(){return this._codeArea}get bottom_of_codeArea_is_above_bottom_of_screen(){return!!this.codeArea&&this.codeArea.getBoundingClientRect().bottom>=0}get bottom_of_codeArea_is_below_top_of_screen(){return!!this.codeArea&&this.codeArea.getBoundingClientRect().bottom<=window.innerHeight}get hasNotBeenExecuted(){return!this._hasBeenExecuted}get isOnScreen(){if(this._KotlinPlaygroundEditor)return this.bottom_of_codeArea_is_above_bottom_of_screen&&this.bottom_of_codeArea_is_below_top_of_screen}execute(){return new Promise((e,t)=>{this._KotlinPlaygroundEditor&&(this._hasBeenExecuted=!0,this._KotlinPlaygroundEditor.execute()),e(),t(new Error("can't execute kotlin playground editor"))})}}new Promise(e=>{const t=document.querySelectorAll(".kotlin-code"),n=[];let o=0;for(const e of t)e instanceof HTMLElement&&n.push(new l(e));for(const t of n)t.init().then(()=>{++o===n.length&&e(new c(n))})}).then(e=>{e.runVisibleEditors()}),function(e,t){const n=document.body,r=void 0===t?0:t.getBoundingClientRect().height;o(()=>{const t=parseInt(window.getComputedStyle(e).paddingTop)-r;i()>=t&&!n.classList.contains("menu-fixed")?n.classList.add("menu-fixed"):i()<=t&&n.classList.contains("menu-fixed")&&n.classList.remove("menu-fixed")})}(document.querySelector(r.CONTENT),document.querySelector(r.TOP_HEADER)),document.querySelector(r.CURRENT_SECTION_NAME).innerHTML=function(){const e=document.querySelector("h1");return null!==e?e.innerHTML:""}(),function(){const e=document.querySelectorAll(`${r.NAVIGATION_MENU} > li > a`),t=document.querySelector("h1");if(null!==t)for(const n of e)n.innerHTML===t.innerHTML&&n.classList.add("active")}(),new Promise((e,t)=>{const n=[],o=document.querySelectorAll(`${r.CONTENT} h2`),i=document.querySelector(`${r.NAVIGATION_MENU}`);for(const e of o)n.push(new s(e,i));e(n.reverse()),t(new Error("can't get list of level two in navigation menu"))}).then(e=>{o(()=>{!function(e){let t=!0;for(const n of e)n.isActive&&t?(t=!1,n.classname="active"):n.classname="unactive"}(e)})});n(0),n(1),n(2),n(3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9sb2dvLXBsYXkucG5nIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvbG9nby1uZWdhdGl2ZS5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9nby1iYWNrLXRvLW1haW4tcGFnZS5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvYWRkU2Nyb2xsRXZlbnRMaXN0ZW5lci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9nZXRQYWdlU2Nyb2xsUG9zaXRpb25Ub3AudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvSFRNTF9TRUxFQ1RPUlMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvbmF2aWdhdGlvbi9zZXROYXZpZ2F0aW9uTWVudS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9lZGl0b3IvRWRpdG9yTWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy90b29scy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9lZGl0b3IvRWRpdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL2VkaXRvci9zZXRFZGl0b3JzTWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9tYWluLnRzIiwid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL25hdmlnYXRpb24vc2V0TWVudVBvc2l0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL25hdmlnYXRpb24vc2V0Q3VycmVudFNlY3Rpb25OYW1lLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYWRkU2Nyb2xsRXZlbnRMaXN0ZW5lciIsImZ1biIsInRpY2tpbmciLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiZXYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJnZXRQYWdlU2Nyb2xsUG9zaXRpb25Ub3AiLCJ1bmRlZmluZWQiLCJwYWdlWU9mZnNldCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiYm9keSIsInBhcmVudE5vZGUiLCJzY3JvbGxUb3AiLCJIVE1MX1NFTEVDVE9SUyIsInNldE5hdmlnYXRpb25NZW51X1RpdGxlTGV2ZWxUd28iLCJbb2JqZWN0IE9iamVjdF0iLCJlbGVtZW50IiwibmF2aWdhdGlvbk1lbnVFbGVtZW50IiwidGhpcyIsIl9lbGVtZW50IiwiX2VsZW1lbnRJbk1lbnUiLCJnZXRFbGVtZW50SW5NZW51IiwiaXNBY3RpdmUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJpbm5lckhlaWdodCIsImNsYXNzbmFtZSIsIl9lbGVtZW50SW5NZW51Q29udGFpbnNBY3RpdmVDbGFzcyIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsImxpc3RPZkxldmVsVHdvSW5NZW51IiwicXVlcnlTZWxlY3RvckFsbCIsIk5BVklHQVRJT05fTUVOVSIsImxldmVsVHdvRWxlbWVudCIsImdldEF0dHJpYnV0ZSIsImNvbnRhaW5zIiwiRWRpdG9yTWFuYWdlcl9FZGl0b3JNYW5hZ2VyIiwia290bGluRWRpdG9ycyIsIl9lZGl0b3JzIiwiX3NldExpc3RlbmVyRm9yRWRpdG9yc0F1dG9FeGVjdXRpb24iLCJlZGl0b3IiLCJpc09uU2NyZWVuIiwiaGFzTm90QmVlbkV4ZWN1dGVkIiwiZXhlY3V0ZSIsInJ1blZpc2libGVFZGl0b3JzIiwiY3JlYXRlSFRNTEVsZW1lbnQiLCJ0YWdOYW1lIiwiY29udGVudCIsIm5ld0VsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiaHRtbEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImNsYXNzTmFtZSIsIkVkaXRvcl9FZGl0b3IiLCJzZWxlY3RvciIsIk1PUkVfVEhBTl9PTkNFX0NPREVfQ0hBTkdFRF9DTEFTU05BTUUiLCJTSE9SVENVVF9JTkZPX0NMQVNTTkFNRSIsIl9oYXNCZWVuRXhlY3V0ZWQiLCJfZXZlbnRGdW5jdGlvbnMiLCJnZXRJbnN0YW5jZSIsIl9Lb3RsaW5QbGF5Z3JvdW5kRWRpdG9yIiwib25DaGFuZ2UiLCJjb2RlIiwiY2hhbmdlZENvdW50ZXIiLCJrb3RsaW5FZGl0b3JDb250YWluZXIiLCJfc2VsZWN0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsIktvdGxpblBsYXlncm91bmQiLCJ0aGVuIiwiX2tvdGxpbkVkaXRvckNvbnRhaW5lciIsIm5vZGVzIiwiY29kZUFyZWEiLCJxdWVyeVNlbGVjdG9yIiwiQ09ERV9BUkVBIiwiSFRNTEVsZW1lbnQiLCJfY29kZUFyZWEiLCJib3R0b21fb2ZfY29kZUFyZWFfaXNfYWJvdmVfYm90dG9tX29mX3NjcmVlbiIsImJvdHRvbSIsImJvdHRvbV9vZl9jb2RlQXJlYV9pc19iZWxvd190b3Bfb2Zfc2NyZWVuIiwicmVqZWN0IiwiRXJyb3IiLCJjb2RlRWxlbWVudHNGb3JLb3RsaW5QbGF5Z3JvdW5kRWRpdG9ySW5pdCIsImxpc3RPZkVkaXRvciIsIm51bWJlck9mRWRpdG9yc0luaXRpYWxpc2VkIiwiY29kZUVsZW1lbnQiLCJwdXNoIiwiaW5pdCIsImxlbmd0aCIsImVkaXRvck1hbmFnZXIiLCJyZWZlcmVuY2VFbGVtZW50Rm9yRml4ZWRNZW51IiwidG9wRWxlbWVudEZpeGVkT3Zlck1lbnUiLCJoZWlnaHRPZkZpeGVkRWxlbWVudFRoYXRIaWRlc01lbnUiLCJoZWlnaHQiLCJyZWZQb3NpdGlvbkZvckZpeGVkTWVudSIsInBhcnNlSW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBhZGRpbmdUb3AiLCJzZXRNZW51UG9zaXRpb24iLCJDT05URU5UIiwiVE9QX0hFQURFUiIsIkNVUlJFTlRfU0VDVElPTl9OQU1FIiwicGFnZVRpdGxlRWxlbWVudCIsImdldEN1cnJlbnRTZWN0aW9uTmFtZSIsIkxFVkVMX09OX05BVklHQVRJT05fRUxFTUVOVFMiLCJjdXJyZW50VGl0bGVQYWdlIiwibGV2ZWwxTWVudU5hdmlnYXRpb25FbGVtZW50Iiwic2V0TGV2ZWxOYXZPbmUiLCJsaXN0VG9SZXR1cm4iLCJUSVRMRV9UV09fRUxFTUVOVFMiLCJOQVZJR0FUSU9OX01FTlVfRUxFTUVOVCIsIm5hdmlnYXRpb25Ud29FbGVtZW50IiwicmV2ZXJzZSIsImxpc3RPZlRpdGxlTGV2ZWxUd28iLCJsYXN0VGl0bGVJc05vdEZvdW5kIiwidGl0bGVMZXZlbFR3byIsInVwZGF0ZUxldmVsVHdvSW5OYXZpZ2F0aW9uTWVudSJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixP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Y0FBYzlELEVBQWV5RixhRVRyQzlGLFNBQVNtRSxjQUFjOUQsRUFBZTBGLHNCQUFzQ3BELFVBR2pGLFdBQ0ksTUFBTXFELEVBQW1CaEcsU0FBU21FLGNBQWMsTUFDaEQsT0FBd0IsT0FBckI2QixFQUNRQSxFQUFpQnJELFVBRWpCLEdBUjhFc0QsR1BLN0YsV0FDSSxNQUVNQyxFQUErQmxHLFNBQVN3QixvQkFBb0JuQixFQUFlb0IsNEJBRTNFMEUsRUFBbUJuRyxTQUFTbUUsY0FBYyxNQUVoRCxHQUF3QixPQUFyQmdDLEVBQ0MsSUFBSSxNQUFNQyxLQUErQkYsRUFDbENFLEVBQTRCekQsWUFBY3dELEVBQWlCeEQsV0FDMUR5RCxFQUE0QmhGLFVBQVVDLElBVGhCLFVBTGxDZ0YsR0EwQ08sSUFBSXpDLFFBQVEsQ0FBQ0MsRUFBU2EsS0FDekIsTUFBTTRCLEtBRUFDLEVBQXFCdkcsU0FBU3dCLG9CQUFvQm5CLEVBQWV3RixjQUNqRVcsRUFBMEJ4RyxTQUFTbUUsaUJBQWlCOUQsRUFBZW9CLG1CQUV6RSxJQUFJLE1BQU1nRixLQUF3QkYsRUFDOUJELEVBQWF0QixLQUFLLElBQUkxRSxFQUFjbUcsRUFBc0JELElBRzlEM0MsRUFBUXlDLEVBQWFJLFdBRXJCaEMsRUFBTyxJQUFJQyxNQUFNLHFEQWpDU1osS0FBTXhGLElBQ2hDZSxFQUF1QixNQU0vQixTQUF3Q3FILEdBQ3BDLElBQUlDLEdBQXNCLEVBRTFCLElBQUksTUFBTUMsS0FBaUJGLEVBQ3BCRSxFQUFjL0YsVUFBWThGLEdBQ3pCQSxHQUFzQixFQUN0QkMsRUFBYzNGLFVBQVksVUFFMUIyRixFQUFjM0YsVUFBWSxXQWIxQjRGLENBQStCdkkiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy9sb2dvLXBsYXkucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL2xvZ28tbmVnYXRpdmUucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL2dvLWJhY2stdG8tbWFpbi1wYWdlLnBuZ1wiOyIsImV4cG9ydCBmdW5jdGlvbiBhZGRTY3JvbGxFdmVudExpc3RlbmVyKGZ1bjogKCkgPT4gdm9pZCkge1xuICAgIGxldCB0aWNraW5nID0gZmFsc2VcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCAoZXYpID0+IHtcbiAgICAgICAgaWYoIXRpY2tpbmcpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGZ1bigpXG4gICAgICAgICAgICAgICAgdGlja2luZyA9IGZhbHNlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHRpY2tpbmcgPSB0cnVlXG4gICAgfSlcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRQYWdlU2Nyb2xsUG9zaXRpb25Ub3AoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHdpbmRvdy5wYWdlWU9mZnNldCAhPT0gdW5kZWZpbmVkKSA/IHdpbmRvdy5wYWdlWU9mZnNldCA6ICgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZSB8fCBkb2N1bWVudC5ib2R5KSBhcyBIVE1MRWxlbWVudCkuc2Nyb2xsVG9wXG59IiwiZXhwb3J0IGVudW0gSFRNTF9TRUxFQ1RPUlMge1xuICAgIENPREVfQVJFQSAgICAgICAgICAgICAgID0gXCIuY29kZS1hcmVhXCIsXG4gICAgQ09OVEVOVCAgICAgICAgICAgICAgICAgPSBcIiNkMnYtY29udGVudFwiLFxuICAgIENVUlJFTlRfU0VDVElPTl9OQU1FICAgID0gXCIjY3VycmVudC1zZWN0aW9uLW5hbWVcIixcbiAgICBUT1BfSEVBREVSICAgICAgICAgICAgICA9IFwiI2Qydi1oZWFkZXJcIixcbiAgICBOQVZJR0FUSU9OX01FTlUgICAgICAgICA9IFwiI3NpdGUtbmF2aWdhdGlvblwiXG59IiwiaW1wb3J0IHtIVE1MX1NFTEVDVE9SU30gZnJvbSBcIi4uL0hUTUxfU0VMRUNUT1JTXCJcbmltcG9ydCB7YWRkU2Nyb2xsRXZlbnRMaXN0ZW5lcn0gZnJvbSBcIi4uL2FkZFNjcm9sbEV2ZW50TGlzdGVuZXJcIlxuXG5leHBvcnQgZnVuY3Rpb24gc2V0TmF2aWdhdGlvbk1lbnUoKSB7XG4gICAgc2V0TGV2ZWxOYXZPbmUoKVxuICAgIHNldExldmVsTmF2VHdvKClcbn1cblxuZnVuY3Rpb24gc2V0TGV2ZWxOYXZPbmUoKSB7XG4gICAgY29uc3QgQ1VSUkVOVF9TRUNUSU9OX0NMQVNTTkFNRSA9IFwiYWN0aXZlXCJcblxuICAgIGNvbnN0IExFVkVMX09OX05BVklHQVRJT05fRUxFTUVOVFMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAke0hUTUxfU0VMRUNUT1JTLk5BVklHQVRJT05fTUVOVX0gPiBsaSA+IGFgKVxuXG4gICAgY29uc3QgY3VycmVudFRpdGxlUGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoMVwiKVxuXG4gICAgaWYoY3VycmVudFRpdGxlUGFnZSAhPT0gbnVsbCl7XG4gICAgICAgIGZvcihjb25zdCBsZXZlbDFNZW51TmF2aWdhdGlvbkVsZW1lbnQgb2YgTEVWRUxfT05fTkFWSUdBVElPTl9FTEVNRU5UUykge1xuICAgICAgICAgICAgaWYobGV2ZWwxTWVudU5hdmlnYXRpb25FbGVtZW50LmlubmVySFRNTCA9PT0gY3VycmVudFRpdGxlUGFnZS5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgICBsZXZlbDFNZW51TmF2aWdhdGlvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZChDVVJSRU5UX1NFQ1RJT05fQ0xBU1NOQU1FKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRMZXZlbE5hdlR3bygpIHtcbiAgICBnZW5lcmF0ZUxpc3RPZlRpdGxlTGV2ZWxUd28oKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICBhZGRTY3JvbGxFdmVudExpc3RlbmVyKCgpID0+IHtcbiAgICAgICAgICAgIHVwZGF0ZUxldmVsVHdvSW5OYXZpZ2F0aW9uTWVudSh2YWx1ZSlcbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMZXZlbFR3b0luTmF2aWdhdGlvbk1lbnUobGlzdE9mVGl0bGVMZXZlbFR3bzogVGl0bGVMZXZlbFR3b1tdKSB7XG4gICAgbGV0IGxhc3RUaXRsZUlzTm90Rm91bmQgPSB0cnVlXG5cbiAgICBmb3IoY29uc3QgdGl0bGVMZXZlbFR3byBvZiBsaXN0T2ZUaXRsZUxldmVsVHdvKSB7XG4gICAgICAgIGlmKHRpdGxlTGV2ZWxUd28uaXNBY3RpdmUgJiYgbGFzdFRpdGxlSXNOb3RGb3VuZCkge1xuICAgICAgICAgICAgbGFzdFRpdGxlSXNOb3RGb3VuZCA9IGZhbHNlXG4gICAgICAgICAgICB0aXRsZUxldmVsVHdvLmNsYXNzbmFtZSA9IFwiYWN0aXZlXCJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpdGxlTGV2ZWxUd28uY2xhc3NuYW1lID0gXCJ1bmFjdGl2ZVwiXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlTGlzdE9mVGl0bGVMZXZlbFR3bygpOiBQcm9taXNlPFRpdGxlTGV2ZWxUd29bXT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGxpc3RUb1JldHVybiA9IFtdXG5cbiAgICAgICAgY29uc3QgVElUTEVfVFdPX0VMRU1FTlRTID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgJHtIVE1MX1NFTEVDVE9SUy5DT05URU5UfSBoMmApIGFzIE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+XG4gICAgICAgIGNvbnN0IE5BVklHQVRJT05fTUVOVV9FTEVNRU5UID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHtIVE1MX1NFTEVDVE9SUy5OQVZJR0FUSU9OX01FTlV9YCkgYXMgSFRNTEVsZW1lbnRcblxuICAgICAgICBmb3IoY29uc3QgbmF2aWdhdGlvblR3b0VsZW1lbnQgb2YgVElUTEVfVFdPX0VMRU1FTlRTKSB7XG4gICAgICAgICAgICBsaXN0VG9SZXR1cm4ucHVzaChuZXcgVGl0bGVMZXZlbFR3byhuYXZpZ2F0aW9uVHdvRWxlbWVudCwgTkFWSUdBVElPTl9NRU5VX0VMRU1FTlQpKVxuICAgICAgICB9XG5cbiAgICAgICAgcmVzb2x2ZShsaXN0VG9SZXR1cm4ucmV2ZXJzZSgpKVxuXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJjYW4ndCBnZXQgbGlzdCBvZiBsZXZlbCB0d28gaW4gbmF2aWdhdGlvbiBtZW51XCIpKVxuICAgIH0pXG59XG5cbmNsYXNzIFRpdGxlTGV2ZWxUd28ge1xuICAgIHByaXZhdGUgX2VsZW1lbnQ6IEhUTUxFbGVtZW50XG5cbiAgICBwcml2YXRlIF9lbGVtZW50SW5NZW51OiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZFxuXG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogSFRNTEVsZW1lbnQsIG5hdmlnYXRpb25NZW51RWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnRcbiAgICAgICAgdGhpcy5fZWxlbWVudEluTWVudSA9IHRoaXMuZ2V0RWxlbWVudEluTWVudShuYXZpZ2F0aW9uTWVudUVsZW1lbnQpXG4gICAgfVxuXG4gICAgZ2V0IGlzQWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPD0gd2luZG93LmlubmVySGVpZ2h0IC8gMlxuICAgIH1cblxuICAgIHNldCBjbGFzc25hbWUoY2xhc3NuYW1lOiBcImFjdGl2ZVwifFwidW5hY3RpdmVcIikge1xuICAgICAgICBpZihjbGFzc25hbWUgPT09IFwiYWN0aXZlXCIpIHtcbiAgICAgICAgICAgIGlmKCEgdGhpcy5fZWxlbWVudEluTWVudUNvbnRhaW5zQWN0aXZlQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAodGhpcy5fZWxlbWVudEluTWVudSBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYodGhpcy5fZWxlbWVudEluTWVudUNvbnRhaW5zQWN0aXZlQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAodGhpcy5fZWxlbWVudEluTWVudSBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRFbGVtZW50SW5NZW51KG5hdmlnYXRpb25NZW51RWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgbGlzdE9mTGV2ZWxUd29Jbk1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAke0hUTUxfU0VMRUNUT1JTLk5BVklHQVRJT05fTUVOVX0gPiBsaSA+IHVsID4gbGkgPiBhYCkgYXMgTm9kZUxpc3RPZjxIVE1MRWxlbWVudD5cblxuICAgICAgICBmb3IoY29uc3QgbGV2ZWxUd29FbGVtZW50IG9mIGxpc3RPZkxldmVsVHdvSW5NZW51KSB7XG4gICAgICAgICAgICBpZihsZXZlbFR3b0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgKyB0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZShcImlkXCIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxldmVsVHdvRWxlbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgX2VsZW1lbnRJbk1lbnVDb250YWluc0FjdGl2ZUNsYXNzKCkge1xuICAgICAgICBpZih0aGlzLl9lbGVtZW50SW5NZW51ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50SW5NZW51LmNsYXNzTGlzdC5jb250YWlucyhcImFjdGl2ZVwiKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge0tvdGxpblBsYXlncm91bmR9IGZyb20gXCIuL0tvdGxpblBsYXlncm91bmRcIlxuaW1wb3J0IHtFZGl0b3J9IGZyb20gXCIuL0VkaXRvclwiXG5pbXBvcnQge2FkZFNjcm9sbEV2ZW50TGlzdGVuZXJ9IGZyb20gXCIuLi9hZGRTY3JvbGxFdmVudExpc3RlbmVyXCJcbmltcG9ydCB7SFRNTF9TRUxFQ1RPUlN9IGZyb20gXCIuLi9IVE1MX1NFTEVDVE9SU1wiXG5cbmV4cG9ydCBjbGFzcyBFZGl0b3JNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3Rvcihrb3RsaW5FZGl0b3JzOiBFZGl0b3JbXSkge1xuXG4gICAgICAgIHRoaXMuX2VkaXRvcnMgPSBrb3RsaW5FZGl0b3JzXG5cbiAgICAgICAgdGhpcy5fc2V0TGlzdGVuZXJGb3JFZGl0b3JzQXV0b0V4ZWN1dGlvbigpXG4gICAgfVxuXG4gICAgcHVibGljIHJ1blZpc2libGVFZGl0b3JzKCkge1xuICAgICAgICBmb3IoY29uc3QgZWRpdG9yIG9mIHRoaXMuX2VkaXRvcnMpIHtcbiAgICAgICAgICAgIGlmKGVkaXRvci5pc09uU2NyZWVuICYmIGVkaXRvci5oYXNOb3RCZWVuRXhlY3V0ZWQpIHtcbiAgICAgICAgICAgICAgICBlZGl0b3IuZXhlY3V0ZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lZGl0b3JzOiBFZGl0b3JbXSA9IFtdXG5cbiAgICBwcml2YXRlIF9zZXRMaXN0ZW5lckZvckVkaXRvcnNBdXRvRXhlY3V0aW9uKCkge1xuICAgICAgICBhZGRTY3JvbGxFdmVudExpc3RlbmVyKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucnVuVmlzaWJsZUVkaXRvcnMoKVxuICAgICAgICB9KVxuICAgIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIVE1MRWxlbWVudCh0YWdOYW1lOiBrZXlvZiBIVE1MRWxlbWVudFRhZ05hbWVNYXAsIGNvbnRlbnQ/OiBzdHJpbmcgfCBIVE1MRWxlbWVudFtdLCBjbGFzc25hbWU/OiBzdHJpbmcpIHtcbiAgICBjb25zdCBuZXdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKVxuXG4gICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIG5ld0VsZW1lbnQuaW5uZXJIVE1MID0gY29udGVudFxuICAgIH0gZWxzZSBpZiAoY29udGVudCkge1xuICAgICAgICBmb3IoY29uc3QgaHRtbEVsZW1lbnQgb2YgY29udGVudCkge1xuICAgICAgICAgICAgbmV3RWxlbWVudC5hcHBlbmRDaGlsZChodG1sRWxlbWVudClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmKGNsYXNzbmFtZSkgbmV3RWxlbWVudC5jbGFzc05hbWUgPSBjbGFzc25hbWVcblxuICAgIHJldHVybiBuZXdFbGVtZW50XG59IiwiaW1wb3J0IHtLb3RsaW5QbGF5Z3JvdW5kfSBmcm9tIFwiLi9Lb3RsaW5QbGF5Z3JvdW5kXCJcbmltcG9ydCB7SFRNTF9TRUxFQ1RPUlN9IGZyb20gXCIuLi9IVE1MX1NFTEVDVE9SU1wiXG5pbXBvcnQge2NyZWF0ZUhUTUxFbGVtZW50fSBmcm9tIFwiLi4vdG9vbHNcIlxuXG5kZWNsYXJlIGZ1bmN0aW9uIEtvdGxpblBsYXlncm91bmQoc2VsZWN0b3I6IHN0cmluZyB8wqBIVE1MRWxlbWVudCwgZXZlbnRGdW5jdGlvbnM/OiBLb3RsaW5QbGF5Z3JvdW5kLklFdmVudEZ1bmN0aW9ucyk6IFByb21pc2U8S290bGluUGxheWdyb3VuZC5JRWRpdG9yW10+XG5cbmV4cG9ydCBjbGFzcyBFZGl0b3Ige1xuICAgIHByaXZhdGUgTU9SRV9USEFOX09OQ0VfQ09ERV9DSEFOR0VEX0NMQVNTTkFNRSA9IFwibW9yZS10aGFuLW9uY2UtY29kZS1jaGFuZ2VkXCJcbiAgICBwcml2YXRlIFNIT1JUQ1VUX0lORk9fQ0xBU1NOQU1FID0gXCJzaG9ydGN1dC1pbmZvIGNvbXBpbGVyLWluZm9cIlxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHNlbGVjdG9yOiBzdHJpbmcgfCBIVE1MRWxlbWVudCxcbiAgICApIHtcbiAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvclxuICAgIH1cblxuICAgIHByaXZhdGUgX3NlbGVjdG9yOiBzdHJpbmcgfCBIVE1MRWxlbWVudFxuXG4gICAgcHVibGljIGluaXQoKTogUHJvbWlzZTxFZGl0b3I+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgS290bGluUGxheWdyb3VuZCh0aGlzLl9zZWxlY3RvciwgdGhpcy5fZXZlbnRGdW5jdGlvbnMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuX0tvdGxpblBsYXlncm91bmRFZGl0b3IpIHtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rb3RsaW5FZGl0b3JDb250YWluZXIgPSB0aGlzLl9Lb3RsaW5QbGF5Z3JvdW5kRWRpdG9yLm5vZGVzWzBdXG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZUFyZWEgPSB0aGlzLl9rb3RsaW5FZGl0b3JDb250YWluZXIucXVlcnlTZWxlY3RvcihIVE1MX1NFTEVDVE9SUy5DT0RFX0FSRUEpXG5cbiAgICAgICAgICAgICAgICAgICAgaWYoY29kZUFyZWEgIT09IG51bGwgJiYgY29kZUFyZWEgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29kZUFyZWEgPSBjb2RlQXJlYVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSggdGhpcyApXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHByaXZhdGUgX2tvdGxpbkVkaXRvckNvbnRhaW5lcj86IEhUTUxFbGVtZW50XG4gICAgZ2V0IGtvdGxpbkVkaXRvckNvbnRhaW5lcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tvdGxpbkVkaXRvckNvbnRhaW5lclxuICAgIH1cblxuICAgIHByaXZhdGUgX2NvZGVBcmVhPzogSFRNTEVsZW1lbnRcbiAgICBwdWJsaWMgZ2V0IGNvZGVBcmVhKCkge3JldHVybiB0aGlzLl9jb2RlQXJlYX1cblxuICAgIHB1YmxpYyBnZXQgYm90dG9tX29mX2NvZGVBcmVhX2lzX2Fib3ZlX2JvdHRvbV9vZl9zY3JlZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGVBcmVhID8gdGhpcy5jb2RlQXJlYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gPj0gMCA6IGZhbHNlXG4gICAgfVxuICAgIHB1YmxpYyBnZXQgYm90dG9tX29mX2NvZGVBcmVhX2lzX2JlbG93X3RvcF9vZl9zY3JlZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGVBcmVhID8gdGhpcy5jb2RlQXJlYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gPD0gd2luZG93LmlubmVySGVpZ2h0IDogZmFsc2VcbiAgICB9XG5cbiAgICBwcml2YXRlIF9oYXNCZWVuRXhlY3V0ZWQgPSBmYWxzZVxuICAgIHB1YmxpYyBnZXQgaGFzTm90QmVlbkV4ZWN1dGVkKCkgeyByZXR1cm4gIXRoaXMuX2hhc0JlZW5FeGVjdXRlZH1cblxuICAgIHB1YmxpYyBnZXQgaXNPblNjcmVlbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX0tvdGxpblBsYXlncm91bmRFZGl0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJvdHRvbV9vZl9jb2RlQXJlYV9pc19hYm92ZV9ib3R0b21fb2Zfc2NyZWVuICYmIHRoaXMuYm90dG9tX29mX2NvZGVBcmVhX2lzX2JlbG93X3RvcF9vZl9zY3JlZW5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBleGVjdXRlKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiggdGhpcy5fS290bGluUGxheWdyb3VuZEVkaXRvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhc0JlZW5FeGVjdXRlZCA9IHRydWVcbiAgICAgICAgICAgICAgICB0aGlzLl9Lb3RsaW5QbGF5Z3JvdW5kRWRpdG9yLmV4ZWN1dGUoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiY2FuJ3QgZXhlY3V0ZSBrb3RsaW4gcGxheWdyb3VuZCBlZGl0b3JcIikpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2V2ZW50RnVuY3Rpb25zOiBLb3RsaW5QbGF5Z3JvdW5kLklFdmVudEZ1bmN0aW9ucyA9IHtcbiAgICAgICAgZ2V0SW5zdGFuY2U6IChlZGl0b3I6IEtvdGxpblBsYXlncm91bmQuSUVkaXRvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fS290bGluUGxheWdyb3VuZEVkaXRvciA9IGVkaXRvclxuICAgICAgICB9LFxuICAgICAgICBvbkNoYW5nZTogKGNvZGU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VkQ291bnRlcisrXG5cbiAgICAgICAgICAgIGlmKHRoaXMuY2hhbmdlZENvdW50ZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmtvdGxpbkVkaXRvckNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmtvdGxpbkVkaXRvckNvbnRhaW5lci5hcHBlbmRDaGlsZChcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUhUTUxFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVIVE1MRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImN0cmwgKyByIDogcnVuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlSFRNTEVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjdHJsICsgc3BhY2UgOiBjb2RlIGNvbXBsZXRpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlNIT1JUQ1VUX0lORk9fQ0xBU1NOQU1FXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmtvdGxpbkVkaXRvckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHRoaXMuTU9SRV9USEFOX09OQ0VfQ09ERV9DSEFOR0VEX0NMQVNTTkFNRSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIHByaXZhdGUgX0tvdGxpblBsYXlncm91bmRFZGl0b3I/OiBLb3RsaW5QbGF5Z3JvdW5kLklFZGl0b3JcblxuICAgIHByaXZhdGUgY2hhbmdlZENvdW50ZXIgPSAwXG59IiwiaW1wb3J0IHtLb3RsaW5QbGF5Z3JvdW5kfSBmcm9tIFwiLi9Lb3RsaW5QbGF5Z3JvdW5kXCJcbmltcG9ydCB7RWRpdG9yTWFuYWdlcn0gZnJvbSBcIi4vRWRpdG9yTWFuYWdlclwiXG5pbXBvcnQge0VkaXRvcn0gZnJvbSBcIi4vRWRpdG9yXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHNldEVkaXRvcnNNYW5hZ2VyKCk6IFByb21pc2U8RWRpdG9yTWFuYWdlcj4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgY29uc3QgY29kZUVsZW1lbnRzRm9yS290bGluUGxheWdyb3VuZEVkaXRvckluaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcua290bGluLWNvZGUnKVxuXG4gICAgICAgIGNvbnN0IGxpc3RPZkVkaXRvcjogRWRpdG9yW10gPSBbXVxuXG4gICAgICAgIGxldCBudW1iZXJPZkVkaXRvcnNJbml0aWFsaXNlZCA9IDBcblxuICAgICAgICBmb3IoY29uc3QgY29kZUVsZW1lbnQgb2YgY29kZUVsZW1lbnRzRm9yS290bGluUGxheWdyb3VuZEVkaXRvckluaXQpIHtcbiAgICAgICAgICAgIGlmKGNvZGVFbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBsaXN0T2ZFZGl0b3IucHVzaChuZXcgRWRpdG9yKGNvZGVFbGVtZW50KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihjb25zdCBlZGl0b3Igb2YgbGlzdE9mRWRpdG9yKSB7XG4gICAgICAgICAgICBlZGl0b3IuaW5pdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIG51bWJlck9mRWRpdG9yc0luaXRpYWxpc2VkKytcbiAgICAgICAgICAgICAgICBpZihudW1iZXJPZkVkaXRvcnNJbml0aWFsaXNlZCA9PT0gbGlzdE9mRWRpdG9yLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEVkaXRvck1hbmFnZXIobGlzdE9mRWRpdG9yKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pXG59XG4iLCJpbXBvcnQge3NldE1lbnVQb3NpdGlvbn0gZnJvbSBcIi4vbmF2aWdhdGlvbi9zZXRNZW51UG9zaXRpb25cIlxuaW1wb3J0IHtIVE1MX1NFTEVDVE9SU30gZnJvbSBcIi4vSFRNTF9TRUxFQ1RPUlNcIlxuaW1wb3J0IHtzZXRDdXJyZW50U2VjdGlvbk5hbWV9IGZyb20gXCIuL25hdmlnYXRpb24vc2V0Q3VycmVudFNlY3Rpb25OYW1lXCJcbmltcG9ydCB7c2V0TmF2aWdhdGlvbk1lbnV9IGZyb20gXCIuL25hdmlnYXRpb24vc2V0TmF2aWdhdGlvbk1lbnVcIlxuaW1wb3J0IHtzZXRFZGl0b3JzTWFuYWdlcn0gZnJvbSBcIi4vZWRpdG9yL3NldEVkaXRvcnNNYW5hZ2VyXCJcblxuc2V0RWRpdG9yc01hbmFnZXIoKS50aGVuKChlZGl0b3JNYW5hZ2VyKSA9PiB7XG4gICAgZWRpdG9yTWFuYWdlci5ydW5WaXNpYmxlRWRpdG9ycygpXG59KVxuXG5zZXRNZW51UG9zaXRpb24oXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihIVE1MX1NFTEVDVE9SUy5DT05URU5UKSBhcyBIVE1MRWxlbWVudCxcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKEhUTUxfU0VMRUNUT1JTLlRPUF9IRUFERVIpIGFzIEhUTUxFbGVtZW50LFxuKVxuXG5cbnNldEN1cnJlbnRTZWN0aW9uTmFtZSgpXG5cbnNldE5hdmlnYXRpb25NZW51KCkiLCJpbXBvcnQge2FkZFNjcm9sbEV2ZW50TGlzdGVuZXJ9IGZyb20gXCIuLi9hZGRTY3JvbGxFdmVudExpc3RlbmVyXCJcbmltcG9ydCB7Z2V0UGFnZVNjcm9sbFBvc2l0aW9uVG9wfSBmcm9tIFwiLi4vZ2V0UGFnZVNjcm9sbFBvc2l0aW9uVG9wXCJcbmltcG9ydCB7SFRNTF9TRUxFQ1RPUlN9IGZyb20gXCIuLi9IVE1MX1NFTEVDVE9SU1wiXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHNldE1lbnVQb3NpdGlvbihyZWZlcmVuY2VFbGVtZW50Rm9yRml4ZWRNZW51OiBIVE1MRWxlbWVudCwgdG9wRWxlbWVudEZpeGVkT3Zlck1lbnU/OiBIVE1MRWxlbWVudCkge1xuXG4gICAgY29uc3QgRklYRURfTUVOVV9DTEFTU19OQU1FID0gXCJtZW51LWZpeGVkXCJcblxuICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5XG5cbiAgICBjb25zdCBoZWlnaHRPZkZpeGVkRWxlbWVudFRoYXRIaWRlc01lbnUgPSB0b3BFbGVtZW50Rml4ZWRPdmVyTWVudSA9PT0gdW5kZWZpbmVkID8gIDAgOiB0b3BFbGVtZW50Rml4ZWRPdmVyTWVudS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcblxuICAgIGFkZFNjcm9sbEV2ZW50TGlzdGVuZXIoKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uVG9wT2ZSZWZFbGVtZW50ID0gcGFyc2VJbnQoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHJlZmVyZW5jZUVsZW1lbnRGb3JGaXhlZE1lbnUpLnBhZGRpbmdUb3AgYXMgc3RyaW5nIClcblxuICAgICAgICBjb25zdCByZWZQb3NpdGlvbkZvckZpeGVkTWVudSA9IHBvc2l0aW9uVG9wT2ZSZWZFbGVtZW50IC0gaGVpZ2h0T2ZGaXhlZEVsZW1lbnRUaGF0SGlkZXNNZW51XG5cbiAgICAgICAgaWYoZ2V0UGFnZVNjcm9sbFBvc2l0aW9uVG9wKCkgPj0gcmVmUG9zaXRpb25Gb3JGaXhlZE1lbnUgJiYgIWJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKEZJWEVEX01FTlVfQ0xBU1NfTkFNRSkpe1xuICAgICAgICAgICAgYm9keS5jbGFzc0xpc3QuYWRkKEZJWEVEX01FTlVfQ0xBU1NfTkFNRSlcbiAgICAgICAgfSBlbHNlIGlmIChnZXRQYWdlU2Nyb2xsUG9zaXRpb25Ub3AoKSA8PSByZWZQb3NpdGlvbkZvckZpeGVkTWVudSAmJiBib2R5LmNsYXNzTGlzdC5jb250YWlucyhGSVhFRF9NRU5VX0NMQVNTX05BTUUpKSB7XG4gICAgICAgICAgICBib2R5LmNsYXNzTGlzdC5yZW1vdmUoRklYRURfTUVOVV9DTEFTU19OQU1FKVxuICAgICAgICB9XG5cbiAgICB9KVxufVxuIiwiaW1wb3J0IHtIVE1MX1NFTEVDVE9SU30gZnJvbSBcIi4uL0hUTUxfU0VMRUNUT1JTXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHNldEN1cnJlbnRTZWN0aW9uTmFtZSgpIHtcbiAgICAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihIVE1MX1NFTEVDVE9SUy5DVVJSRU5UX1NFQ1RJT05fTkFNRSkgYXMgSFRNTEVsZW1lbnQpLmlubmVySFRNTCA9IGdldEN1cnJlbnRTZWN0aW9uTmFtZSgpXG59XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRTZWN0aW9uTmFtZSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IHBhZ2VUaXRsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaDFcIilcbiAgICBpZihwYWdlVGl0bGVFbGVtZW50ICE9PSBudWxsICkge1xuICAgICAgICByZXR1cm4gcGFnZVRpdGxlRWxlbWVudC5pbm5lckhUTUxcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJcIlxuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=