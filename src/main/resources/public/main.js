!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){},function(e,t,n){e.exports=n.p+"images/logo-play.png"},function(e,t,n){e.exports=n.p+"images/logo-negative.png"},function(e,t,n){e.exports=n.p+"images/go-back-to-main-page.png"},function(e,t,n){"use strict";function o(e){let t=!1;window.addEventListener("scroll",n=>{t||window.requestAnimationFrame(()=>{e(),t=!1}),t=!0})}function i(){return void 0!==window.pageYOffset?window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop}var r;function s(e){let t=!0;for(const n of e)n.isActive&&t?(t=!1,n.classname="active"):n.classname="unactive"}n.r(t),function(e){e.CODE_AREA=".code-area",e.CONTENT="#d2v-content",e.CURRENT_SECTION_NAME="#current-section-name",e.TOP_HEADER="#d2v-header",e.NAVIGATION_MENU="#site-navigation"}(r||(r={}));class c{constructor(e,t){this._element=e,this._elementInMenu=this.getElementInMenu(t)}get isActive(){return this._element.getBoundingClientRect().top<=window.innerHeight/2}set classname(e){"active"===e?this._elementInMenuContainsActiveClass||this._elementInMenu.classList.add("active"):this._elementInMenuContainsActiveClass&&this._elementInMenu.classList.remove("active")}getElementInMenu(e){const t=document.querySelectorAll(`${r.NAVIGATION_MENU} > li > ul > li > a`);for(const e of t)if(e.getAttribute("href")==="#"+this._element.getAttribute("id"))return e}get _elementInMenuContainsActiveClass(){return void 0!==this._elementInMenu&&this._elementInMenu.classList.contains("active")}}class u{constructor(e,t){this.codeArea=e,this.kotlinEditor=t,this._hasBeenExecuted=!1}get hasNotBeenExecuted(){return!this._hasBeenExecuted}get isOnScreen(){return this.codeArea.getBoundingClientRect().bottom>=0&&this.codeArea.getBoundingClientRect().bottom<=window.innerHeight}execute(){return new Promise((e,t)=>{this._hasBeenExecuted=!0,this.kotlinEditor.execute(),e(),t(new Error("can't execute kotlin playground editor"))})}}class l{constructor(e){this.editors=[],this.setEditors(e),this.setListenerForEditorsAutoExecution(),this.runVisibleEditors()}setEditors(e){for(const t in e){const n=e[t],o=n.nodes[0].querySelector(r.CODE_AREA);null!==o?this.editors.push(new u(o,n)):console.error(`codeArea of ${t+1} kotlin editor`)}}setListenerForEditorsAutoExecution(){o(()=>{this.runVisibleEditors()})}runVisibleEditors(){for(const e of this.editors)e.isOnScreen&&e.hasNotBeenExecuted&&e.execute()}}const a=[];KotlinPlayground(".kotlin-code",{getInstance:e=>{a.push(e)}}).then(()=>{new l(a)}),function(e,t){const n=document.body,r=void 0===t?0:t.getBoundingClientRect().height;o(()=>{const t=parseInt(window.getComputedStyle(e).paddingTop)-r;i()>=t&&!n.classList.contains("menu-fixed")?n.classList.add("menu-fixed"):i()<=t&&n.classList.contains("menu-fixed")&&n.classList.remove("menu-fixed")})}(document.querySelector(r.CONTENT),document.querySelector(r.TOP_HEADER)),document.querySelector(r.CURRENT_SECTION_NAME).innerHTML=function(){const e=document.querySelector("h1");return null!==e?e.innerHTML:""}(),new Promise((e,t)=>{const n=[],o=document.querySelectorAll(`${r.CONTENT} h2`),i=document.querySelector(`${r.NAVIGATION_MENU}`);for(const e of o)n.push(new c(e,i));e(n.reverse()),t(new Error("can't get list of level two in navigation menu"))}).then(e=>{s(e),o(()=>{s(e)})});n(0),n(1),n(2),n(3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,